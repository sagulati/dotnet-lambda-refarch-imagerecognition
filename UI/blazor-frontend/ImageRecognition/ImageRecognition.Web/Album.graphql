scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress


type Album {
  createdAt: AWSDateTime!
  id: ID!
  name: String!
  owner: String
  photos(filter: ModelPhotoFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, uploadTime: ModelStringKeyConditionInput): ModelPhotoConnection  
  updatedAt: AWSDateTime!
}

type GeoCoordinates {
  Latitude: Latitude!
  Longtitude: Longtitude!
}

type Latitude {
  D: Float!
  Direction: GeoCoordinateDirection!
  M: Float!
  S: Float!
}

type Longtitude {
  D: Float!
  Direction: GeoCoordinateDirection!
  M: Float!
  S: Float!
}

type ModelAlbumConnection {
  items: [Album]
  nextToken: String
}

type ModelPhotoConnection {
  items: [Photo]
  nextToken: String
}

type Mutation {
  createAlbum(condition: ModelAlbumConditionInput, input: CreateAlbumInput!): Album  
  createPhoto(condition: ModelPhotoConditionInput, input: CreatePhotoInput!): Photo  
  deleteAlbum(condition: ModelAlbumConditionInput, input: DeleteAlbumInput!): Album  
  deletePhoto(condition: ModelPhotoConditionInput, input: DeletePhotoInput!): Photo  
  startSfnExecution(input: StartSfnExecutionInput!): StartSfnExecutionResult 
  updateAlbum(condition: ModelAlbumConditionInput, input: UpdateAlbumInput!): Album  
  updatePhoto(condition: ModelPhotoConditionInput, input: UpdatePhotoInput!): Photo  
}

type Photo {
  ProcessingStatus: Status
  SfnExecutionArn: String
  album: Album  
  albumId: ID!
  bucket: String!
  createdAt: AWSDateTime!
  exifMake: String
  exitModel: String
  format: String
  fullsize: PhotoS3Info
  geoLocation: GeoCoordinates
  id: ID!
  objectDetected: [String]
  owner: String
  thumbnail: PhotoS3Info
  updatedAt: AWSDateTime!
  uploadTime: AWSDateTime!
}

type PhotoS3Info {
  height: Int
  key: String!
  width: Int
}

type Query {
  checkSfnStatus(input: checkSfnStatusInput!): SfnStatusResult
  getAlbum(id: ID!): Album  
  getPhoto(id: ID!): Photo  
  listAlbums(filter: ModelAlbumFilterInput, limit: Int, nextToken: String): ModelAlbumConnection  
  listPhotos(filter: ModelPhotoFilterInput, limit: Int, nextToken: String): ModelPhotoConnection  
  listPhotosByAlbumUploadTime(albumId: ID, filter: ModelPhotoFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, uploadTime: ModelStringKeyConditionInput): ModelPhotoConnection  
}

type SfnStatusResult {
  startDate: Float
  status: Status
  stopDate: Float
}

type StartSfnExecutionResult  {
  executionArn: String!
  startDate: Float
}

enum GeoCoordinateDirection {
  E
  N
  S
  W
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum Status {
  ABORTED
  FAILED
  PENDING
  RUNNING
  SUCCEEDED
  TIMED_OUT
}

input CreateAlbumInput {
  id: ID
  name: String!
  owner: String
}

input CreatePhotoInput {
  ProcessingStatus: Status
  SfnExecutionArn: String
  albumId: ID!
  bucket: String!
  exifMake: String
  exitModel: String
  format: String
  fullsize: PhotoS3InfoInput
  geoLocation: GeoCoordinatesInput
  id: ID
  objectDetected: [String]
  owner: String
  thumbnail: PhotoS3InfoInput
  uploadTime: AWSDateTime!
}

input DeleteAlbumInput {
  id: ID
}

input DeletePhotoInput {
  id: ID
}

input GeoCoordinatesInput {
  Latitude: LatitudeInput!
  Longtitude: LongtitudeInput!
}

input LatitudeInput {
  D: Float!
  Direction: GeoCoordinateDirection!
  M: Float!
  S: Float!
}

input LongtitudeInput {
  D: Float!
  Direction: GeoCoordinateDirection!
  M: Float!
  S: Float!
}

input ModelAlbumConditionInput {
  and: [ModelAlbumConditionInput]
  name: ModelStringInput
  not: ModelAlbumConditionInput
  or: [ModelAlbumConditionInput]
}

input ModelAlbumFilterInput {
  and: [ModelAlbumFilterInput]
  id: ModelIDInput
  name: ModelStringInput
  not: ModelAlbumFilterInput
  or: [ModelAlbumFilterInput]
  owner: ModelStringInput
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelPhotoConditionInput {
  ProcessingStatus: ModelStatusInput
  SfnExecutionArn: ModelStringInput
  albumId: ModelIDInput
  and: [ModelPhotoConditionInput]
  bucket: ModelStringInput
  exifMake: ModelStringInput
  exitModel: ModelStringInput
  format: ModelStringInput
  not: ModelPhotoConditionInput
  objectDetected: ModelStringInput
  or: [ModelPhotoConditionInput]
  uploadTime: ModelStringInput
}

input ModelPhotoFilterInput {
  ProcessingStatus: ModelStatusInput
  SfnExecutionArn: ModelStringInput
  albumId: ModelIDInput
  and: [ModelPhotoFilterInput]
  bucket: ModelStringInput
  exifMake: ModelStringInput
  exitModel: ModelStringInput
  format: ModelStringInput
  id: ModelIDInput
  not: ModelPhotoFilterInput
  objectDetected: ModelStringInput
  or: [ModelPhotoFilterInput]
  owner: ModelStringInput
  uploadTime: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStatusInput {
  eq: Status
  ne: Status
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelStringKeyConditionInput {
  beginsWith: String
  between: [String]
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
}

input PhotoS3InfoInput {
  height: Int
  key: String!
  width: Int
}

input StartSfnExecutionInput {
  input: String!
  stateMachineArn: String!
}

input UpdateAlbumInput {
  id: ID!
  name: String
  owner: String
}

input UpdatePhotoInput {
  ProcessingStatus: Status
  SfnExecutionArn: String
  albumId: ID
  bucket: String
  exifMake: String
  exitModel: String
  format: String
  fullsize: PhotoS3InfoInput
  geoLocation: GeoCoordinatesInput
  id: ID!
  objectDetected: [String]
  owner: String
  thumbnail: PhotoS3InfoInput
  uploadTime: AWSDateTime
}

input checkSfnStatusInput {
  executionArn: String!
}
